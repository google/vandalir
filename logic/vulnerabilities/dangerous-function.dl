// Copyright (c) 2023 Google LLC
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

#include "core/defines.dl"
#include "core/function.dl"
#include "core/instruction.dl"
#include "core/block.dl"
#include "core/results.dl"

#ifdef DEBUG_VULN_DANGEROUS_FUNC
#define VDANF_OUTPUT(x) OUTPUT_IMPL(x)
#else
#define VDANF_OUTPUT(x)
#endif


.decl dangerous_function(func: symbol, iid: instr_t, level: symbol, msg: symbol, line: symbol)
VDANF_OUTPUT(dangerous_function)

dangerous_function(func, iid, level, msg, line) :-
  Function.get(fid, func, _, _, line),
  Block.get(fid, bid, bname),
  Instruction.Call.global_func(iid, bid, _, name, _),
  name = "%gets",
  level = "Vulnerability",
  msg = cat("Block: ", bname,
            ": Inherently dangerous functions 'get()' found.").

REPORT_RESULTS(dangerous_function).