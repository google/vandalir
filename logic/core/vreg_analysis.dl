// Copyright (c) 2023 Google LLC
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

#pragma once

#include "defines.dl"
#include "block.dl"
#include "type.dl"
#include "operand.dl"
#include "instruction.dl"
#include "value_analysis.dl"

#ifdef DEBUG_VREG_ANALYSIS
#define VRA_OUTPUT(x) OUTPUT_IMPL(x)
#else
#define VRA_OUTPUT(x)
#endif

.comp _VRegAnalysis {

  .decl depends_on(fid: func_t, vreg1: name_t, vreg2: name_t)
  VRA_OUTPUT(depends_on)

  depends_on(fid, vreg1, vreg2) :-
    Block.get(fid, bid, _),
    Instruction.Load.get(_, bid, vreg1, addr),
    Operand.vreg(addr, vreg2, _).

  depends_on(fid, vreg1, vreg2) :-
    Block.get(fid, bid, _),
    Instruction.Conversation.get(iid, bid, vreg1),
    Instruction.Conversation.operands(iid, bid, op, _, _),
    Operand.vreg(op, vreg2, _).

  depends_on(fid, vreg1, vreg2) :-
    Block.get(fid, bid, _),
    (
      Instruction.Binary.operands(_, bid, op0, _, vreg1),
      OperandUtil.name(op0, vreg2, _);
      Instruction.Binary.operands(_, bid, _, op1, vreg1),
      OperandUtil.name(op1, vreg2, _)
    ).

  depends_on(fid, vreg1, vreg2) :-
    Block.get(fid, bid, _),
    Instruction.Store.get(_, bid, addr_op, value_op),
    OperandUtil.name(addr_op, vreg1, _),
    OperandUtil.name(value_op, vreg2, _).

  depends_on(fid, vreg1, vreg2) :-
    depends_on(fid, vreg1, tmp),
    depends_on(fid, tmp, vreg2).


  .decl equel(fid: func_t,
              iid1: instr_t,
              vreg1: name_t,
              tid1: type_t,
              vreg2: name_t,
              tid2: type_t)
  VRA_OUTPUT(equel)

  equel(fid, iid1, vreg1, tid1, vreg2, tid2) :-
    Block.get(fid, bid, _),
    Instruction.Store.get(iid1, bid, addr_op, value_op),
    (
      Type.Pointer.pointee(tid1_ptr, tid1),
      Operand.vreg(addr_op, vreg1, tid1_ptr);
      Operand.global_ref(addr_op, vreg1, tid1)
    ),
    tid1 = tid2,
    OperandUtil.name(value_op, vreg2, tid2).

  equel(fid, iid1, vreg1, tid1, vreg2, tid2) :-
    Block.get(fid, bid, _),
    Instruction.Store.get(iid1, bid, addr_op, value_op),
    Type.Pointer.pointee(tid1_ptr, tid1),
    Operand.vreg(addr_op, vreg1, tid1_ptr),
    Operand.global_ref(value_op, vreg2, tid2).

  // TODO: this case is true only if index is 0.
  // in other cases it is 'partial' true.
  equel(fid, iid1, vreg1, tid1, vreg2, tid2) :-
    Block.get(fid, bid, _),
    Instruction.GetElementPtr.get(iid1, bid, vreg1, addr_op, _),
    Instruction.GetElementPtr.index(iid1, idx_op),
    Operand.int(idx_op, _),
    OperandUtil.name(addr_op, vreg2, _),
    !Type.is_struct(tid2),
    type(fid, vreg2, tid2),
    type(fid, vreg1, tid1).

  equel(fid, iid1, vreg1, tid1, vreg2, tid2) :-
    Block.get(fid, bid, _),
    Instruction.Load.get(iid1, bid, vreg1, addr_op),
    (
      Type.Pointer.pointee(addr_ptr, tid1),
      Operand.vreg(addr_op, vreg2, addr_ptr);
      Operand.global_ref(addr_op, vreg2, tid1)
    ),
    tid2 = tid1,
    type(fid, vreg2, tid2).

  // Example:
  // If %0 is i8** type, then
  //    `%1 = load i8*, i8** %0`
  // means that %1 is equel to the vreg which is pointed by %0
  equel(fid, iid1, vreg1, tid1, vreg2, tid2) :-
    Block.get(fid, bid, _),
    Instruction.Load.get(iid1, bid, vreg1, addr_op),
    OperandUtil.name(addr_op, tmp, addr_tid),
    Type.Pointer.pointee(addr_tid, tid1),
    type(fid, tmp, tmp_tid),
    tmp_tid = addr_tid,
    InstructionAnalysis.is_instruction_before(iid1, iid_tmp),
    point_to(fid, iid_tmp, tmp, tmp_tid, vreg2, tid2).

  // if %10 -> %1 and %11 -> %1, then %10 == %11
  equel(fid, iid1, vreg1, tid1, vreg2, tid2) :-
    point_to(fid, iid1, vreg1, tid1, tmp, tid_tmp),
    InstructionAnalysis.is_instruction_before(iid1, iid_tmp),
    point_to(fid, iid_tmp, vreg2, tid2, tmp, tid_tmp).

  equel(fid, iid1, vreg1, tid1, vreg2, tid2) :-
    Block.get(fid, bid, _),
    Instruction.Conversation.operands(iid1, bid, op, tid1, vreg1),
    OperandUtil.name(op, vreg2, tid2).

  equel(fid, iid1, vreg1, tid1, vreg2, tid2) :-
    Block.get(fid, bid, _),
    Instruction.Conversation.operands(iid1, bid, op, tid1, vreg1),
    OperandUtil.name(op, vreg2, tid2),
    Type.Pointer.ptr_type(tid1, _, lvl),
    Type.Pointer.ptr_type(tid2, _, lvl).

  equel(fid, iid1, vreg1, tid1, vreg2, tid2) :-
    equel(fid, iid1, vreg1, tid1, tmp, tid_tmp),
    equel(fid, iid_tmp, tmp, tid_tmp, vreg2, tid2),
    InstructionAnalysis.is_instruction_before(iid1, iid_tmp),
    !modified(iid_tmp, iid1, tmp).

  equel(fid, iid1, vreg1, tid1, vreg2, tid2) :-
    equel(fid, iid1, vreg1, tid1, tmp, tid_tmp),
    equel(fid, iid_tmp, vreg2, tid2, tmp, tid_tmp),
    InstructionAnalysis.is_instruction_before(iid1, iid_tmp),
    !modified(iid_tmp, iid1, tmp).

  // Same as `equel` except it ignores types matching.
  .decl point_to(fid: func_t,
              iid1: instr_t,
              vreg1: name_t,
              tid1: type_t,
              vreg2: name_t,
              tid2: type_t)
  VRA_OUTPUT(point_to)

  point_to(fid, iid1, vreg1, tid1, vreg2, tid2) :-
    Block.get(fid, bid, _),
    Instruction.Store.get(iid1, bid, addr_op, value_op),
    OperandUtil.name(addr_op, vreg1, tid_addr),
    OperandUtil.name(value_op, vreg2, tid_value),
    type(fid, vreg1, tid1),
    type(fid, vreg2, tid2),
    Type.Pointer.pointee(tid_addr, tid1),
    Type.Pointer.pointee(tid_value, tid2),
    tid1 = tid_value.

  // case:
  //   %12 = load i8*, i8** %1, align 8
  //   %13 = bitcast %union.Type* %2 to i8**
  //   store i8* %12, i8** %13, align 8
  // result: %13 -> %12
  point_to(fid, iid1, vreg1, tid1, vreg2, tid2) :-
    Block.get(fid, bid, _),
    Instruction.Store.get(iid1, bid, addr_op, value_op),
    OperandUtil.name(addr_op, vreg1, tid1),
    OperandUtil.name(value_op, vreg2, tid2),
    type(fid, vreg1, tid1),
    type(fid, vreg2, tid2),
    Type.is_pointer(tid2),
    Type.Pointer.pointee(tid1, tid2).

  point_to(fid, iid1, vreg1, tid1, vreg2, tid2) :-
    point_to(fid, iid1, vreg1, tid1, tmp, tid_tmp),
    equel(fid, iid_tmp, tmp, tid_tmp, vreg2, tid2),
    InstructionAnalysis.is_instruction_before(iid1, iid_tmp),
    !modified(iid_tmp, iid1, tmp).

  point_to(fid, iid1, vreg1, tid1, vreg2, tid2) :-
    equel(fid, iid1, vreg1, tid1, tmp, tmp_tid),
    point_to(fid, iid_tmp, tmp, tmp_tid, vreg2, tid2),
    InstructionAnalysis.is_instruction_before(iid1, iid_tmp),
    !modified(iid_tmp, iid1, tmp).


  .decl same_external(fid1: func_t,
                       iid1: instr_t,
                       vreg1: name_t,
                       tid1: type_t,
                       fid2: func_t,
                       iid2: instr_t,
                       vreg2: name_t,
                       tid2: type_t)
  VRA_OUTPUT(same_external)

  same_external(fid1, iid1, vreg1, tid1, fid2, iid2, vreg2, tid2) :-
    bid1 = min bid: Block.get(fid1, bid, _),
    iid1 = min iid: Instruction.get(iid, bid1, _, _),
    Function.get(fid1, fname, _, _, _),
    Function.ith_arg(fid1, idx, vreg1, tid1),
    // get the caller
    Block.get(fid2, bid, _),
    Instruction.Call.global_func(iid2, bid, _, fname, _),
    Instruction.Call.ith_operand(iid2, idx, arg_op),
    OperandUtil.name(arg_op, vreg2, tid2).

  same_external(fid1, iid1, vreg1, tid1, fid2, iid2, vreg2, tid2) :-
    Block.get(fid1, bid1, _),
    Instruction.Call.global_func(iid1, bid1, vreg1, fname, tid1),
    Function.get(fid2, fname, _, _, _),
    Block.get(fid2, bid2, _),
    Instruction.Ret.get(iid2, bid2, op),
    OperandUtil.name(op, vreg2, tid2).

  .decl modified(iid_start: instr_t, iid_end: instr_t, vreg: name_t)
  VRA_OUTPUT(modified)

  modified(iid_start, iid_end, vreg) :-
    Instruction.Store.get(iid_store, _, addr_op, _),
    Operand.vreg(addr_op, vreg, _),
    InstructionAnalysis.is_instruction_before(iid_store, iid_start),
    InstructionAnalysis.is_instruction_before(iid_end, iid_store).

  modified(iid_start, iid_end, vreg) :-
    Instruction.Call.get(iid_call, _, vreg, _, _),
    InstructionAnalysis.is_instruction_before(iid_call, iid_start),
    InstructionAnalysis.is_instruction_before(iid_end, iid_call).

  .decl modified_at(fid: func_t, iid: instr_t, vreg: name_t, iid_mod: instr_t)
  VRA_OUTPUT(modified_at)

  modified_at(fid, iid, vreg, iid) :-
    Block.get(fid, bid, _),
    Instruction.Store.get(iid, bid, addr_op, _),
    Operand.vreg(addr_op, vreg, _).

  modified_at(fid, iid, vreg, iid) :-
    Block.get(fid, bid, _),
    Instruction.Call.get(iid, bid, vreg, _, _).

  modified_at(fid, iid, vreg, iid_mod) :-
    equel(fid, iid, vreg, _, vreg_new, _),
    InstructionAnalysis.is_instruction_before(iid, iid_tmp),
    modified_at(fid, iid_tmp, vreg_new, iid_mod).

  .decl type(fid: func_t, name: name_t, tid: type_t)
  VRA_OUTPUT(type)

  type(fid, name, tid) :-
    Block.get(fid, bid, _),
    Instruction.Conversation.operands(_, bid, _, tid, name).

  // TODO: come up with a better solution for GEP cases.
  // Theoretically, a result type of GEP instruction is a pointer to the type of
  // addressed element, but sometimes it is convenient to treat it as just the
  // addressed type. Thus let's use both types for now.
  // Example:
  //    %8 = getelementptr [7 x [6 x i8], [7 x [6 x i8]]* %7, i64 0, i64 5
  //    %9 = getelementptr [7 x i8], [6 x i8]* %8, i64 0, i64 0
  // here, %9 will have 'i8 *' (correct) and 'i8' (not correct) types,
  // and, %8 - '[6 x i8] *' (correct) and '[6 x i8]' (not correct) types, but
  // %8 is convenient to consider as [6 x i8] type, especially in `buff_size`
  type(fid, name, tid) :-
    Block.get(fid, bid, _),
    Instruction.GetElementPtr.get(_, bid, name, addr_op, _),
    OperandUtil.name(addr_op, _, tid_ptr),
    Type.Pointer.pointee(tid_ptr, tid_collection),
    (
     Type.Array.get(tid_collection, tid, _);
     Type.Vector.get(tid_collection, tid, _)
    ).

  type(fid, name, tid) :-
    Block.get(fid, bid, _),
    Instruction.GetElementPtr.get(_, bid, name, addr_op, _),
    OperandUtil.name(addr_op, _, tid_ptr),
    Type.Pointer.pointee(tid_ptr, tid_collection),
    (
     Type.Array.get(tid_collection, tid_el, _);
     Type.Vector.get(tid_collection, tid_el, _)
    ),
    Type.Pointer.pointee(tid, tid_el).

  type(fid, name, tid) :-
    Block.get(fid, bid, _),
    Instruction.GetElementPtr.get(iid, bid, name, addr_op, _),
    Instruction.GetElementPtr.index(iid, op),
    OperandUtil.name(addr_op, _, tid_ptr),
    GET_INT_FROM_OP(fid, op, idx),
    Type.Pointer.pointee(tid_ptr, tid_str),
    Type.Struct.get(tid_str, _),
    Type.Struct.ith_field(tid_str, idx, tid).

  type(fid, name, tid) :-
    Block.get(fid, bid, _),
    Instruction.GetElementPtr.get(iid, bid, name, addr_op, _),
    Instruction.GetElementPtr.index(iid, op),
    OperandUtil.name(addr_op, _, tid_ptr),
    GET_INT_FROM_OP(fid, op, idx),
    Type.Pointer.pointee(tid_ptr, tid_str),
    Type.Struct.get(tid_str, _),
    Type.Struct.ith_field(tid_str, idx, tid_fld),
    Type.Pointer.pointee(tid, tid_fld).

  type(fid, name, tid) :-
    Block.get(fid, bid, _),
    Instruction.GetElementPtr.get(_, bid, name, addr_op, _),
    OperandUtil.name(addr_op, _, tid),
    Type.Pointer.pointee(tid, ptid),
    !Type.collection(ptid, _).

  type(fid, name, tid) :-
    Block.get(fid, bid, _),
    Instruction.Load.get(_, bid, name, addr_op),
    (
      Type.Pointer.pointee(tid_ptr, tid),
      Operand.vreg(addr_op, _, tid_ptr);
      Operand.global_ref(addr_op, _, tid)
    ).

  type(fid, name, tid) :-
    Block.get(fid, bid, _),
    Instruction.Binary.operands(_, bid, op0, _, name),
    OperandUtil.name(op0, _, tid).

  type(fid, name, tid) :-
    Block.get(fid, bid, _),
    Instruction.Alloca.get(_, bid, name, tid, _).

  type(fid, name, tid) :-
    Block.get(fid, bid, _),
    Instruction.Call.get(_, bid, name, _, tid_func),
    Type.FuncPointer.ret_type(tid_func, tid).

  type(fid, name, tid) :-
    Block.get(fid, _, _),
    GlobalVar.get(_, name, tid).

  type(fid, name, tid) :-
    Function.ith_arg(fid, _, name, tid).
}
.init VRegAnalysis = _VRegAnalysis
