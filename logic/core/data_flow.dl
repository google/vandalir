// Copyright (c) 2023 Google LLC
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

#pragma once

#include "defines.dl"
#include "input/data_flow_local.dl"
#include "function.dl"
#include "global.dl"

#ifdef DEBUG_DFG
#define DFG_OUTPUT(x) OUTPUT_IMPL(x)
#else
#define DFG_OUTPUT(x)
#endif


.comp _DataFlowGraph {

  .decl source_instr(fid: func_t, bid: block_t, sink: instr_t, src: instr_t)
  DFG_OUTPUT(source_instr)

  source_instr(fid, bid, sink, src) :-
    data_flow_local(_, fid, bid, sink, DFL_STYPE_INSTR, id),
    src = as(id, instr_t).


  .decl source_arg(fid: func_t, bid: block_t, sink: instr_t, name: name_t)
  DFG_OUTPUT(source_arg)

  source_arg(fid, bid, sink, name) :-
    data_flow_local(_, fid, bid, sink, DFL_STYPE_FUNC_ARG, id),
    aid = as(id, func_arg_t),
    Function.arg(fid, aid, name, _).


  .decl source_global(fid: func_t, bid: block_t, sink: instr_t, name: name_t)
  DFG_OUTPUT(source_global)

  source_global(fid, bid, sink, name) :-
    data_flow_local(_, fid, bid, sink, DFL_STYPE_GLOBAL, id),
    gid = as(id, global_t),
    GlobalVar.get(gid, name, _).


  .decl sources(fid: func_t, bid: block_t, sink: instr_t, src: instr_t)
  DFG_OUTPUT(sources)

  sources(fid, bid, sink, src) :-
    data_flow_local(_, fid, bid, sink, DFL_STYPE_INSTR, id),
    src = as(id, instr_t).

  sources(fid, bid, sink, src) :-
    sources(fid, bid, sink, tmp),
    data_flow_local(_, fid, _, tmp, DFL_STYPE_INSTR, id),
    src = as(id, instr_t),
    sink != src.


  .decl sources_vreg(fid: func_t, bid: block_t,
                    sink_iid: instr_t, sink: name_t,
                    src_iid: instr_t, src: name_t)
  DFG_OUTPUT(sources_vreg)

  sources_vreg(fid, bid, sink_iid, sink, src_iid, src) :-
    source_instr(fid, bid, sink_iid, src_iid),
    (
      Instruction.dest(sink_iid, sink);
      // the sink is addr op for Store instruction
      Instruction.Store.get(sink_iid, bid, addr_op, _),
      OperandUtil.name(addr_op, sink, _);
      // terminator instruction or any other without dest vreg
      !Instruction.dest(sink_iid, _),
      !Instruction.Store.get(sink_iid, _, _, _),
      sink = ""
    ),
    (
      Instruction.dest(src_iid, src);
      Instruction.Store.get(src_iid, _, src_addr_op, _),
      OperandUtil.name(src_addr_op, src, _)
    ).

  // TODO: come up with a better approach.
  // It is very convinient to return a source's instruction id,
  // because it can be used to narrow down other relaitions.
  // Problem is that no an instruction id for a function arg
  // or global var. Workaround is to return the first function's
  // instruction id, but it is not perfect.
  sources_vreg(fid, bid, sink_iid, sink, src_iid, src) :-
    func_first_bid = min tmp_bid: Block.get(fid, tmp_bid, _),
    src_iid = min iid: Instruction.get(iid, func_first_bid, _, _),

    source_arg(fid, bid, sink_iid, src),
    (
      Instruction.dest(sink_iid, sink);
      // the sink is addr op for Store instruction
      Instruction.Store.get(sink_iid, bid, addr_op, _),
      OperandUtil.name(addr_op, sink, _);
      // terminator instruction or any other without dest vreg
      !Instruction.dest(sink_iid, _),
      !Instruction.Store.get(sink_iid, _, _, _),
      sink = ""
    ).

  sources_vreg(fid, bid, sink_iid, sink, src_iid, src) :-
    func_first_bid = min tmp_bid: Block.get(fid, tmp_bid, _),
    src_iid = min iid: Instruction.get(iid, func_first_bid, _, _),

    source_global(fid, bid, sink_iid, src),
    (
      Instruction.dest(sink_iid, sink);
      // the sink is addr op for Store instruction
      Instruction.Store.get(sink_iid, bid, addr_op, _),
      OperandUtil.name(addr_op, sink, _);
      // terminator instruction or any other without dest vreg
      !Instruction.dest(sink_iid, _),
      !Instruction.Store.get(sink_iid, _, _, _),
      sink = ""
    ).

  sources_vreg(fid, bid, sink_iid, sink, src_iid, src) :-
    source_instr(fid, bid, sink_iid, tmp_iid),
    sources_vreg(fid, _, tmp_iid, _, src_iid, src),
    (
      Instruction.dest(sink_iid, sink);
      // the sink is addr op for Store instruction
      Instruction.Store.get(sink_iid, bid, addr_op, _),
      OperandUtil.name(addr_op, sink, _);
      // terminator instruction or any other without dest vreg
      !Instruction.dest(sink_iid, _),
      !Instruction.Store.get(sink_iid, _, _, _),
      sink = ""
    ).

}

.init DFG = _DataFlowGraph
