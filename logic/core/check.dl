// Copyright (c) 2023 Google LLC
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

#pragma once

#include "defines.dl"
#include "value_analysis.dl"
#include "vreg_analysis.dl"
#include "control_flow.dl"
#include "operand.dl"
#include "function.dl"
#include "block.dl"

#ifdef DEBUG_CHECK
  #define CH_OUTPUT(x) OUTPUT_IMPL(x)
#else
  #define CH_OUTPUT(x)
#endif

.comp _Check {

.decl get_upperbound_limited_value(fid: func_t, bid: block_t, vreg: symbol, idx: number)
CH_OUTPUT(get_upperbound_limited_value)

get_upperbound_limited_value(fid, bid, vreg, idx) :-
  VRegValueAnalysis.get_int(fid, vreg, value),
  check_boundary_true(fid, bid, pred, vreg, value_op),
  GET_INT_FROM_OP(fid, value_op, bound_value),
  !check_boundary_false(fid, bid, pred, vreg, _),
  (
   SMALLER_COND(pred), check_value = bound_value - 1;
   SMALLER_EQUAL_COND(pred), check_value = bound_value
  ),
  (value > check_value,
   idx = check_value;
   value <= check_value,
   idx = value
  ).

get_upperbound_limited_value(fid, bid, vreg, idx) :-
  VRegValueAnalysis.get_int(fid, vreg, idx),
  check_boundary_false(fid, bid, pred, vreg, _),
  UPPERBOUND_COND(pred).

get_upperbound_limited_value(fid, bid, vreg, idx) :-
  VRegValueAnalysis.get_int(fid, vreg, value),
  check_boundary_false(fid, bid, pred, vreg, value_op),
  GET_INT_FROM_OP(fid, value_op, bound_value),
  !check_boundary_true(fid, bid, pred, vreg, _),
  (
   BIGGER_COND(pred), check_value = bound_value;
   BIGGER_EQUAL_COND(pred), check_value = bound_value - 1
  ),
  (value > check_value,
   idx = check_value;
   value <= check_value,
   idx = value
  ).

get_upperbound_limited_value(fid, bid, vreg, idx) :-
  VRegValueAnalysis.get_int(fid, vreg, idx),
  check_boundary_true(fid, bid, pred, vreg, _),
  LOWERBOUND_COND(pred).

get_upperbound_limited_value(fid, bid, vreg, idx) :-
  Block.get(fid, bid, _),
  VRegValueAnalysis.get_int(fid, vreg, idx),
  !check_boundary(fid, bid, _, _, vreg, _, _, _).

.decl check_boundary(fid: func_t,
                     bid: block_t,
                     cmp_iid: instr_t,
                     pred: symbol,
                     vreg: name_t,
                     value_op: operand_t,
                     true_label: name_t,
                     false_label: name_t)
CH_OUTPUT(check_boundary)

check_boundary(fid, bid, cmp_iid, pred, vreg, value_op, true_label, false_label) :-
  CFG.block_forward_egdes(fid, cmp_bid, bid),

  Instruction.ICmp.get(cmp_iid, cmp_bid, cmp_dest),
  Instruction.ICmp.operands(cmp_iid, pred, op0, value_op),
  (
    VRegAnalysis.depends_on(fid, vreg, op0_vreg);
    VRegAnalysis.depends_on(fid, op0_vreg, vreg);
    VRegAnalysis.depends_on(fid, vreg, vreg_tmp),
    VRegAnalysis.depends_on(fid, op0_vreg, vreg_tmp)
  ),
  Operand.vreg(op0, op0_vreg, _),

  Block.get(fid, br_bid, _),
  Instruction.BrCond.get(_, br_bid, cond_op, true_label, false_label),
  Operand.vreg(cond_op, cmp_dest, _).


.decl check_boundary_true(fid: func_t,
                          bid: block_t,
                          pred: symbol,
                          vreg: name_t,
                          value_op: operand_t)
CH_OUTPUT(check_boundary_true)

check_boundary_true(fid, bid, pred, vreg, value_op) :-
  Block.get(fid, true_bid, true_label),
  check_boundary(fid, bid, _, pred, vreg, value_op, true_label, _),
  (true_bid = bid;
   CFG.block_forward_egdes(fid, true_bid, bid)
  ).


.decl check_boundary_false(fid: func_t,
                          bid: block_t,
                          pred: symbol,
                          vreg: name_t,
                          value_op: operand_t)
CH_OUTPUT(check_boundary_false)

check_boundary_false(fid, bid, pred, vreg, value_op) :-
  Block.get(fid, false_bid, false_label),
  check_boundary(fid, bid, _, pred, vreg, value_op, _, false_label),
  (false_bid = bid;
   CFG.block_forward_egdes(fid, false_bid, bid)
  ).


.decl check_null(fid: func_t, bid: block_t, vreg: symbol)
CH_OUTPUT(check_null)

check_null(fid, bid, vreg) :-
  check_boundary_true(fid, bid, pred, vreg, value_op),
  IS_OP_NULL(fid, value_op),
  !check_boundary_false(fid, bid, pred, vreg, _),
  (
   SMALLER_COND(pred);
   BIGGER_COND(pred);
   NOT_EQUAL_COND(pred)
  ).

check_null(fid, bid, vreg) :-
  check_boundary_false(fid, bid, pred, vreg, value_op),
  IS_OP_NULL(fid, value_op),
  !check_boundary_true(fid, bid, pred, vreg, _),
  EQUAL_COND(pred).

}

.init Check = _Check
