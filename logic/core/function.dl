// Copyright (c) 2023 Google LLC
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

#pragma once

#include "defines.dl"
#include "input/function.dl"

#ifdef DEBUG_FUNCTION
#define FUNC_OUTPUT(x) OUTPUT_IMPL(x)
#else
#define FUNC_OUTPUT(x)
#endif


.comp _Function {
  .decl get(fid: func_t, name: symbol, tid: type_t, num_args: number, line: symbol)
  FUNC_OUTPUT(get)

  get(fid, name, tid, num_args, line) :-
    function(fid, name, _, tid, num_args, line).

  .decl ith_arg(fid: func_t, idx: number, name: name_t, tid: type_t)
  FUNC_OUTPUT(ith_arg)

  ith_arg(fid, idx, name, tid) :-
    function(fid, _, _, _, num, line),
    num != -1,  // ignore opaque structs
    idx < num,
    ith_arg_impl(_, fid, idx, name, tid).

  .decl ith_arg_impl(id: func_arg_t,
                       fid: func_t,
                       idx: number,
                       name: name_t,
                       tid: type_t)
  FUNC_OUTPUT(ith_arg_impl)

  ith_arg_impl(id, fid, idx, name, tid) :-
    idx=0,
    id = min arg_id: function_argument(arg_id, fid, _, _),
    function_argument(id, fid, name, tid).


  ith_arg_impl(id, fid, idx + 1, name, tid) :-
    ith_arg_impl(id_prev, fid, idx, _, _),
    id = min arg_id: {arg_id > id_prev, function_argument(arg_id, fid, _, _) },
    function_argument(id, fid, name, tid).
}

.init Function = _Function
