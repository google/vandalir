// Copyright (c) 2023 Google LLC
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

#pragma once

#include "defines.dl"

.decl func_caller (
    id: id_t,
    func: func_t,
    arg: func_t
)
INPUT(func_caller)

.decl func_callee (
    id: id_t,
    func: func_t,
    arg: func_t
)
INPUT(func_callee)

.decl func_ext_callee (
    id: id_t,
    func: func_t,
    arg: symbol
)
INPUT(func_ext_callee)

.decl func_block_return (
    id: id_t,
    func: func_t,
    arg: block_t
)
INPUT(func_block_return)

.decl func_block_entry (
    id: id_t,
    func: func_t,
    arg: block_t
)
INPUT(func_block_entry)

.decl block_pred (
    id: id_t,
    func: func_t,
    blk: block_t,
    arg: block_t
)
INPUT(block_pred)

.decl block_succ (
    id: id_t,
    func: func_t,
    blk: block_t,
    arg: block_t
)
INPUT(block_succ)

.decl block_control_dependency (
    id: id_t,
    func: func_t,
    blk: block_t,
    arg: block_t
)
INPUT(block_control_dependency)

.decl block_imm_control_dependency (
    id: id_t,
    func: func_t,
    blk: block_t,
    arg: block_t
)
INPUT(block_imm_control_dependency)

.decl block_control_dependent (
    id: id_t,
    func: func_t,
    blk: block_t,
    arg: block_t
)
INPUT(block_control_dependent)

.decl block_imm_control_dependent (
    id: id_t,
    func: func_t,
    blk: block_t,
    arg: block_t
)
INPUT(block_imm_control_dependent)

.decl block_ipostdom (
    id: id_t,
    func: func_t,
    blk: block_t,
    arg: block_t
)
INPUT(block_ipostdom)

.decl block_ipostdom_children (
    id: id_t,
    func: func_t,
    blk: block_t,
    arg: block_t
)
INPUT(block_ipostdom_children)

.decl block_ipostdom_children_of_ret (
    id: id_t,
    func: func_t,
    blk: block_t,
    arg: block_t
)
INPUT(block_ipostdom_children_of_ret)

.decl block_idom (
    id: id_t,
    func: func_t,
    blk: block_t,
    arg: block_t
)
INPUT(block_idom)

.decl block_idom_children (
    id: id_t,
    func: func_t,
    blk: block_t,
    arg: block_t
)
INPUT(block_idom_children)

.decl block_idom_children_of_ret (
    id: id_t,
    func: func_t,
    blk: block_t,
    arg: block_t
)
INPUT(block_idom_children_of_ret)
