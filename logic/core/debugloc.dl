// Copyright (c) 2023 Google LLC
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

#pragma once

#include "defines.dl"
#include "input/debugloc.dl"

#ifdef DEBUG_DEBUGLOC
#define DLOC_OUTPUT(x) OUTPUT_IMPL(x)
#else
#define DLOC_OUTPUT(x)
#endif


.comp _DebugLoc {
  .decl function(fid: func_t, msg: symbol)
  DLOC_OUTPUT(function)

  function(fid, msg) :-
    func_debugloc(_, fid, line, col, filename, dirname),
    (
      dirname != "",
      path = cat(dirname, "/", filename);
      dirname = "",
      path = filename
    ),
    (
      col = 0,
      coll_str = "";
      col != 0,
      coll_str = cat(" / col ", to_string(col))
    ),
    msg = cat(path, " at line ", to_string(line), coll_str).

  .decl instruction(iid: instr_t, msg: symbol)
  DLOC_OUTPUT(instruction)

  instruction(iid, msg) :-
    instruction_debugloc(_, iid, line, col, filename, dirname),
    (
      dirname != "",
      path = cat(dirname, "/", filename);
      dirname = "",
      path = filename
    ),
    (
      col = 0,
      coll_str = "";
      col != 0,
      coll_str = cat(" / col ", to_string(col))
    ),
    msg = cat(path, " at line ", to_string(line), coll_str).
}

.init DebugLoc = _DebugLoc
